enum Option<T> {
    Some(val: T),
    None
}

entity sync(clk: clk, signal: bool) -> bool {
    reg(clk) out = signal;
    out
}

entity posedge_detector(clk: clk, signal: bool) -> bool {
    reg(clk) prev = signal;
    signal && (if prev {false} else {true})
}

enum TxState {
    Waiting,
    Transmit(
        // Number of clock cycles since the last bit was sent
        last_bit: int<10>,
        num_transmitted: int<3>,
        data: int<8>
    ),
    LastCycle(time: int<10>)
}

enum TxExternalState {
    Ready,
    Transmitting
}

// SPI transmitter module. Frequency is fixed to 100 KHz. If no bit is being
// transmitted and to_transmit is Some(val), val will be transmitted.
// Otherwise, to_transmit is ignored.
// Return value is (sclk, mosi, waiting)
entity spi_tx(clk: clk, rst: bool, to_transmit: Option<int<8>>) ->
    (bool, bool, TxExternalState)
{
    reg(clk) state reset (rst: TxState::Waiting()) = {
        match state {
            TxState::Waiting => {
                match to_transmit {
                    Option::Some(val) => TxState::Transmit(0, 0, val),
                    Option::None => TxState::Waiting()
                }
            },
            TxState::Transmit(last_bit, num_transmitted, data) => {
                let sclk_op = last_bit == 500;
                let new_last_bit = last_bit + 1;

                if sclk_op {
                    if num_transmitted == 7 {
                        TxState::LastCycle(0)
                    }
                    else {
                        TxState::Transmit(new_last_bit, num_transmitted + 1, data >> 1)
                    }
                }
                else if last_bit == 999 {
                    TxState::Transmit(0, num_transmitted, data)
                }
                else {
                    TxState::Transmit(new_last_bit, num_transmitted, data)
                }
            },
            TxState::LastCycle(time) => {
                if time == 499 {
                    TxState::Waiting()
                }
                else {
                    TxState::LastCycle(time + 1)
                }
            }
        }
    };

    match state {
        TxState::Waiting() => (true, true, TxExternalState::Ready()),
        TxState::Transmit(last_bit, _, data) => {
            ((last_bit < 500), (data & 1) == 1, TxExternalState::Transmitting())
        },
        TxState::LastCycle(_) => {
            (false, true, TxExternalState::Transmitting())
        }
    }
}
