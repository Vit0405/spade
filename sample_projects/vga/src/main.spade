entity check_bit(signal: int<10>, bit_mask: int<10>) -> bool {
    (signal & bit_mask) == bit_mask
}

// hsync, vsync, (r, g, b)
entity main(clk: clk, rst: bool) -> (bool, bool, (bool, bool, bool)) {
    let state = inst vga_fsm$(clk, rst);

    let (hsync, vsync, pixel) = inst vga_output(state);

    let rgb_int = match pixel {
        Option::Some((x, y)) => {
            (x >> 4) + (y >> 4)
            // 0b111
        },
        Option::None => 0
    };

    let rgb = (
        inst check_bit(rgb_int, 0b100),
        inst check_bit(rgb_int, 0b010),
        inst check_bit(rgb_int, 0b001),
    );

    (hsync, vsync, rgb)
}
