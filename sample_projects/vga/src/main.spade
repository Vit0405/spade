entity check_bit(signal: int<10>, bit_mask: int<10>) -> bool {
    (signal & bit_mask) == bit_mask
}

// hsync, vsync, (r, g, b)
entity main(clk: clk, rst: bool) -> (bool, bool, (bool, bool, bool)) {
    let state = inst vga_fsm$(clk, rst);
    let (hsync, vsync, pixel) = inst vga_output(state);
    let vga_tick = inst vga_frame_done(state);

    reg(clk) offset_counter reset (rst: 0) = {
        if vga_tick { offset_counter + 1 } else { offset_counter }
    };
    let offset = offset_counter >> 2;


    let rgb_int = match pixel {
        Option::Some((x, y)) => {
            ((x + offset) >> 4) + ((y + offset) >> 4)
        },
        Option::None => 0
    };

    let rgb = (
        inst check_bit(rgb_int, 0b100),
        inst check_bit(rgb_int, 0b010),
        inst check_bit(rgb_int, 0b001),
    );

    (hsync, vsync, rgb)
}
