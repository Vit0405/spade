/// Divide x by 2**pow rounding towards the nearest integer, with 0.5 and -0.5
/// being rounded towards +inf.
///
/// Example outputs:
///
/// 2/2 = 1
/// 3/2 = 2
/// -3/2 = -1

// FIXME: Implement in spade rather than as a compiler intrinsic when spade
// supports codegen for generics
// lifeguard spade#140
// FIXME: pow and result should probably not be `N` but type inference is not good
// enough for that yet
fn div_pow2<#N>(x: int<N>, pow: int<N>) -> int<N> __builtin__


/// Computes the absolute value of x. The result is truncated, meaning that
/// `abs(-2^(N-1)) == -2^(N-1)`.
fn abs_trunc<#N>(x: int<N>) -> int<N> {
    if x < 0 {
        -x
    }
    else {
        x
    }
}

/// Returns the max value of two integers
fn max<#N>(x: int<N>, y: int<N>) -> int<N> {
    if x < y {
        y
    } else {
        x
    }
}

/// Returns the min value of two integers
fn min<#N>(x: int<N>, y: int<N>) -> int<N> {
    if x < y {
        x
    } else {
        y
    }
}

/// Returns the two integers in increasing order
fn order<#N>(x: int<N>, y: int<N>) -> (int<N>, int<N>) {
    if x < y {
        (x, y)
    } else {
        (y, x)
    }
}


/// Returns the gray code value of the given binary value
fn bin_to_gray<#N>(x: uint<N>) -> uint<N> {
    (x >> 1) ^ x
}

//NOTE: Implemented as a builtin because we don't support generate loops yet
/// Returns the binary value of the given gray code value
fn gray_to_bin<#N>(x: uint<N>) -> uint<N> __builtin__
